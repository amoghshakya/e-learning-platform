// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                String       @id @default(cuid())
  username          String?      @unique
  password          String?
  email             String       @unique
  name              String
  image             String?
  emailVerified     DateTime?    @default(now())
  isInstructor      Boolean      @default(false)
  role              Role         @default(USER)
  acc_creation_date DateTime     @default(now())
  instructors       Instructor[]
  enrollments       Enrollment[]
  accounts          Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Course {
  id            String       @id @default(cuid())
  title         String
  description   String
  instructor_id String?
  category_id   String?
  price         Decimal?     @default(0)
  thumbnail     String?
  isPublished   Boolean      @default(false)
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  lessons       Lesson[]
  enrollments   Enrollment[]
  attachments   Attachment[]

  instructor Instructor? @relation(fields: [instructor_id], references: [id], onDelete: Cascade)
  category   Category?   @relation(fields: [category_id], references: [id], onDelete: SetNull)
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  video_url   String?
  position    Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  muxData MuxData?

  course_id    String
  course       Course      @relation(fields: [course_id], references: [id], onDelete: Cascade)
  Enrollment   Enrollment? @relation(fields: [enrollmentId], references: [id])
  enrollmentId String?
}

model MuxData {
  id         String  @id @default(cuid())
  asset_id   String
  playbackId String?

  lesson_id String @unique
  lesson    Lesson @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
}

model Attachment {
  id   String @id @default(cuid())
  name String
  url  String @db.Text

  course_id String
  course    Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([course_id])
}

model Category {
  id      String   @id @default(cuid())
  name    String
  courses Course[]
}

model Instructor {
  id      String   @id @default(cuid())
  user_id String   @unique
  courses Course[]

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Enrollment {
  id               String    @id @default(cuid())
  user_id          String
  course_id        String
  enrolled_at      DateTime  @default(now())
  progress         Int       @default(0)
  completedLessons Lesson[]
  completed_at     DateTime?
  last_accessed    DateTime?

  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@unique([user_id, course_id])
  @@index([user_id, course_id])
}
